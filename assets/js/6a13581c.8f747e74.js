"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[359],{3221:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>g});var t=r(4848),s=r(8453);const o={sidebar_position:1},a="agent.py",i={id:"resources/agent_py",title:"agent.py",description:"",source:"@site/docs/00_resources/00_agent_py.md",sourceDirName:"00_resources",slug:"/resources/agent_py",permalink:"/Agent-API/docs/resources/agent_py",draft:!1,unlisted:!1,editUrl:"https://github.com/Praktikant-Klobuerste/Agent-API/tree/main/docusaurus/docs/00_resources/00_agent_py.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"resources",permalink:"/Agent-API/docs/category/resources"},next:{title:"lair.py",permalink:"/Agent-API/docs/resources/lair_py"}},c={},g=[];function d(e){const n={code:"code",h1:"h1",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"agentpy",children:"agent.py"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from flask import request\r\nfrom flask.views import MethodView\r\nfrom flask_smorest import Blueprint, abort\r\nfrom schemas import AgentSchema\r\n\r\n\r\nblp = Blueprint("Agent", __name__, description="Operations on Agents")\r\n\r\nclass Agent:\r\n    _nAgents = 0\r\n    _registry = {}\r\n\r\n    def __init__(self, name, eye_color):\r\n        self.name = name\r\n        self.eye_color = eye_color\r\n        self.code = Agent._nAgents\r\n        Agent._nAgents += 1\r\n        Agent._registry[self.code] = self\r\n\r\n    def __eq__(self, other):\r\n        if type(other) != Agent:\r\n            return False\r\n        else:\r\n            return other.code == self.code\r\n\r\n    def __repr__(self):\r\n        return f\'{self.name, self.eye_color, self.code}\'\r\n\r\n    def to_dict(self):\r\n        return {"name" : self.name, "eye_color" : self.eye_color, "code" : self.code}\r\n\r\n    @classmethod\r\n    def get(cls, agent_id):\r\n        return cls._registry.get(agent_id)\r\n\r\n\r\n\r\n@blp.route("/agent")\r\nclass AgentList(MethodView):\r\n    def get(self):\r\n        """Idiot"""\r\n        return [agent.to_dict() for agent in Agent._registry.values()]\r\n\r\n\r\n    @blp.arguments(AgentSchema)\r\n    @blp.response(201, AgentSchema)\r\n    def post(self, new_data):\r\n        # print(new_data)\r\n        agent = Agent(**new_data)\r\n        print(Agent._registry)\r\n        return agent.to_dict()\r\n\r\n\r\n\r\n@blp.route("/agent/<int:agent_id>")\r\nclass AgentResource(MethodView):\r\n    @blp.response(200, AgentSchema)\r\n    def get(self, agent_id):\r\n        agent = Agent.get(agent_id)\r\n        if agent is None:\r\n            abort(404, message="Agent not found.")\r\n        else:\r\n            return agent.to_dict()\r\n\r\n    def delete(self, agent_id):\r\n        agent = Agent.get(agent_id)\r\n        if agent is None:\r\n            abort(404, message="Agent not found.")\r\n        else:\r\n            del Agent._registry[agent_id]\r\n            return {"message" : f"removed agent {agent_id}"}\r\n\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);